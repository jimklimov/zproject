#   Generate Jenkinsfile for project, to test automatically on Jenkins v2.x+
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("jenkins", "pipeline CI script for jenkins")

.macro target_jenkins
. if defined (project.jenkins_file)
.   jenkinsfile = project.jenkins_file
. else
.   jenkinsfile = 'Jenkinsfile'
. endif
. if file.exists (jenkinsfile)
.    echo "NOT regenerating an existing Jenkins file '$(jenkinsfile:)'; you might want to move yours out of the way and re-generate the project again to get updated settings"
. else
.    output jenkinsfile
/*
    $(project.name) - $(project.description?'':)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
*/

pipeline {
.   if defined (project.jenkins_docker)
    agent {
        docker { image '$(project.jenkins_docker:)' }
    }
.   else
    agent any
.   endif
    triggers {
        pollSCM 'H/5 * * * *'
    }
.# TODO: augment the envvars to benefit from CCACHE (PATH for the binaries, CCACHE_BASEDIR to cache the project objects relative to its random workspace name)
.# TODO: Add a --enable-address-sanitizer=yes matrix
    stages {
        stage ('prepare') {
            steps {
                checkout scm
                sh './autogen.sh'
                stash (name: 'prepped', includes: '**/*')
            }
        }
        stage ('compile') {
            parallel {
                stage ('build with DRAFT') {
                    steps {
                        unstash 'prepped'
                        sh './configure --enable-drafts=yes'
                        sh 'make -k -j4 || make'
                        sh 'echo "Are GitIgnores good after make with drafts? (should have no output below)"; git status -s || true'
                        stash (name: 'built-draft', includes: '**/*')
                    }
                }
                stage ('build without DRAFT') {
                    steps {
                        unstash 'prepped'
                        sh './configure --enable-drafts=no'
                        sh 'make -k -j4 || make'
                        sh 'echo "Are GitIgnores good after make without drafts? (should have no output below)"; git status -s || true'
                        stash (name: 'built-nondraft', includes: '**/*')
                    }
                }
                stage ('build with DOCS') {
                    steps {
                        unstash 'prepped'
                        sh './configure --enable-drafts=yes --with-docs=yes'
                        sh 'make -k -j4 || make'
                        sh 'echo "Are GitIgnores good after make with docs? (should have no output below)"; git status -s || true'
                    }
                }
            }
        }
        stage ('check') {
            parallel {
                stage ('check with DRAFT') {
                    steps {
                        unstash 'built-draft'
                        timeout (time: 5, unit: 'MINUTES') {
                            sh 'make check'
                        }
                        sh 'echo "Are GitIgnores good after make check with drafts? (should have no output below)"; git status -s || true'
                    }
                }
                stage ('check without DRAFT') {
                    steps {
                        unstash 'built-nondraft'
                        timeout (time: 5, unit: 'MINUTES') {
                            sh 'make check'
                        }
                        sh 'echo "Are GitIgnores good after make check without drafts? (should have no output below)"; git status -s || true'
                    }
                }
            }
        }
        stage ('memcheck') {
            parallel {
                stage ('memcheck with DRAFT') {
                    steps {
                        unstash 'built-draft'
                        timeout (time: 5, unit: 'MINUTES') {
                            sh 'make memcheck && exit 0 ; echo "Re-running failed ($?) memcheck with greater verbosity" >&2 ; make VERBOSE=1 memcheck-verbose'
                        }
                        sh 'echo "Are GitIgnores good after make memcheck with drafts? (should have no output below)"; git status -s || true'
                    }
                }
                stage ('memcheck without DRAFT') {
                    steps {
                        unstash 'built-nondraft'
                        timeout (time: 5, unit: 'MINUTES') {
                            sh 'make memcheck && exit 0 ; echo "Re-running failed ($?) memcheck with greater verbosity" >&2 ; make VERBOSE=1 memcheck-verbose'
                        }
                        sh 'echo "Are GitIgnores good after make memcheck without drafts? (should have no output below)"; git status -s || true'
                    }
                }
            }
        }
.  if jenkins_distcheck ?= 0
.  else
        stage ('distcheck') {
            parallel {
                stage ('distcheck with DRAFT') {
                    steps {
                        unstash 'built-draft'
                        timeout (time: 10, unit: 'MINUTES') {
                            sh 'make distcheck'
                        }
                        sh 'echo "Are GitIgnores good after make distcheck with drafts? (should have no output below)"; git status -s || true'
                    }
                }
                stage ('distcheck without DRAFT') {
                    steps {
                        unstash 'built-nondraft'
                        timeout (time: 10, unit: 'MINUTES') {
                            sh 'make distcheck'
                        }
                        sh 'echo "Are GitIgnores good after make distcheck without drafts? (should have no output below)"; git status -s || true'
                    }
                }
            }
        }
.  endif
    }
    post {
        success {
            script {
                if (currentBuild.getPreviousBuild()?.result != 'SUCCESS') {
                    // Uncomment desired notification

                    //slackSend (color: "#008800", message: "Build ${env.JOB_NAME} is back to normal.")
                    //emailext (to: "qa@example.com", subject: "Build ${env.JOB_NAME} is back to normal.", body: "Build ${env.JOB_NAME} is back to normal.")
                }
            }
        }
        failure {
            // Uncomment desired notification
            // Section must not be empty, you can delete the sleep once you set notification
            sleep 1
            //slackSend (color: "#AA0000", message: "Build ${env.BUILD_NUMBER} of ${env.JOB_NAME} ${currentBuild.result} (<${env.BUILD_URL}|Open>)")
            //emailext (to: "qa@example.com", subject: "Build ${env.JOB_NAME} failed!", body: "Build ${env.BUILD_NUMBER} of ${env.JOB_NAME} ${currentBuild.result}\\nSee ${env.BUILD_URL}")
        }
    }
}
. endif
.endmacro
